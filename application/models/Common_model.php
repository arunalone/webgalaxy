<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Common_model extends CI_Model {    function __construct() {        parent:: __construct();    }    function getAllData($select, $table, $where = array(), $group_by = array(), $order_by = array(), $limit = array(), $resultType = "object") {//        $this->db->distinct();        $this->db->select($select);        $this->db->from($table);        if (!empty($where)) {            $this->db->where($where);        }        if (!empty($group_by)) {            $this->db->group_by($group_by);        }        if (!empty($order_by)) {            $this->db->order_by($order_by);        }        if (!empty($limit)) {            $this->db->limit($limit);        }        $query = $this->db->get();        if ($resultType === 'array') {            return ($query->num_rows() > 0) ? $query->result_array() : array();        } elseif ($resultType === 'object') {            return ($query->num_rows() > 0) ? $query->result() : array();        }    }    function insertData($table, $data) {        $this->db->insert($table, $data);        return TRUE;    }    function lastInsertId($table, $data) {        $this->db->insert($table, $data);        return $this->db->insert_id();    }    function getDataById($select, $table, $where) {        $query = $this->db->select($select, FALSE)->from($table)->where($where)->get();        return $query->row();    }    function getCountRows($select, $table, $where) {        $query = $this->db->select($select)->from($table)->where($where)->get();        return $query->num_rows();    }    function checkDuplicate($table, $where) {        $query = $this->db->select()->from($table)->where($where)->get();        if ($query->num_rows() > 0) {            return FALSE;        } else {            return TRUE;        }    }    function updateData($table, $data, $where) {        $query = $this->db->update($table, $data, $where);        return TRUE;    }    function deleteData($table, $where) {        $this->db->delete($table, $where);    }    function checkCount($select, $table, $where) {        $this->db->select($select);        $this->db->from($table);        if (count($where) > 0) {            $this->db->where($where);        }        $query = $this->db->get();        return $query->num_rows();    }    function getDataByQuery($query) {        $query_sel = $this->db->query($query);        return $query_sel->result();    }    function getAllDataINQuery($select, $table, $in_column, $in_where, $where, $group_by, $order_by, $limit, $resultType = "object") {        $this->db->distinct();        $this->db->select($select);        $this->db->from($table);        if (!empty($in_where)) {            $this->db->where_in($in_column, $in_where);        }        if (!empty($where)) {            $this->db->where($where);        }        if (!empty($group_by)) {            $this->db->group_by($group_by);        }        if (!empty($order_by)) {            $this->db->order_by($order_by);        }        if (!empty($limit)) {            $this->db->limit($limit);        }        $query = $this->db->get();        if ($resultType === 'array') {            return $query->result_array();        } elseif ($resultType === 'object') {            return $query->result();        } else if ($resultType === 'row') {            return $query->row();        }    }    function is_user_logged_in() {        if ($this->session->userdata('emp_id') > 0) {            return TRUE;        } else {            return FALSE;        }    }    function password_hash_conversion($password) {        $options = array('cost' => 12);        $hash = password_hash($password, PASSWORD_BCRYPT, $options); //This will be stored in DB        return $hash;    }    function hash_password_verify($password, $dbpassword) {        if (password_verify($password, $dbpassword)) {            return TRUE;        } else {            return FALSE;        }    }}